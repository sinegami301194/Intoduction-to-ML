#include <opencv2/core.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/video/tracking.hpp>
#include <string>
#include <iostream>
#include <vector>
#include <ar10/ccmap.h>
#include <ar10/ccdata.h>
#include <warping/warping.h>
#include <ar10/ticker.h>
#include <ocvutils/ocvutils.h>
#include <opencv2/optflow.hpp>

using namespace cv;
using namespace std;

bool fill_out_segmmap(const Mat & segm_image, Mat & out_segmmap)
{
  Ticker t("Function time without forEach: ", NULL, 0);
  for(int j=0; j<segm_image.rows; j++)
  {
    for (int i=0; i<segm_image.cols; i++)
    {
      if (segm_image.at<cv::Vec3b>(j,i)[0] == 0)
      {
        rectangle(out_segmmap,Rect(2*i, 2*j, 2, 2), Scalar(128,200,100));
      }
      if (segm_image.at<cv::Vec3b>(j,i)[0] == 1)
      {
        rectangle(out_segmmap,Rect(2*i, 2*j, 2, 2), Scalar(128,150,255));
      }
      if (segm_image.at<cv::Vec3b>(j,i)[0] == 2)
      {
        rectangle(out_segmmap,Rect(2*i, 2*j, 2, 2), Scalar(6,6,255));
      }
      if (segm_image.at<cv::Vec3b>(j,i)[0] == 3)
      {
        rectangle(out_segmmap,Rect(2*i, 2*j, 2, 2), Scalar(222,53,35)); // жатка
      }
      if (segm_image.at<cv::Vec3b>(j,i)[0] == 4)
      {
        rectangle(out_segmmap,Rect(2*i, 2*j, 2, 2), Scalar(38,226,239)); // земля
      }
      if (segm_image.at<cv::Vec3b>(j,i)[0] == 5)
      {
        rectangle(out_segmmap,Rect(2*i, 2*j, 2, 2), Scalar(255,128,0));
      }
      if (segm_image.at<cv::Vec3b>(j,i)[0] == 6)
      {
        rectangle(out_segmmap,Rect(2*i, 2*j, 2, 2), Scalar(255,0,128));
      }
      if (segm_image.at<cv::Vec3b>(j,i)[0] == 7)
      {
        rectangle(out_segmmap,Rect(2*i, 2*j, 2, 2), Scalar(255,0,255));
      }
    }
  }
  return true;
}


bool binar_segm_image(Mat & binMat, const Mat & segm_image)
{
  // 5 - mach
  // 4 - скошенная трава
  // 3 - жатка
  // 2 - валок
  // 0 - обочина
  for(int i = 0 ; i < segm_image.rows ; i++)
  {
    for(int j = 0 ; j < segm_image.cols ; j++)
    {
      if(((segm_image.at<Vec3b>(i,j)[0]+segm_image.at<Vec3b>(i,j)[1]+segm_image.at<Vec3b>(i,j)[2])/3) == 0) // >4
      {
        binMat.at<uchar>(2 * i, 2 * j) = 255;
        binMat.at<uchar>(2 * i + 1, 2 * j) = 255;
        binMat.at<uchar>(2 * i, 2 * j + 1) = 255;
        binMat.at<uchar>(2 * i + 1, 2 * j + 1) = 255;	//Make pixel white
      }
      else
      {
        binMat.at<uchar>(2 * i, 2 * j) = 0;
        binMat.at<uchar>(2 * i + 1, 2 * j) = 0;
        binMat.at<uchar>(2 * i, 2 * j + 1) = 0;
        binMat.at<uchar>(2 * i + 1, 2 * j + 1) = 0;     //Make pixel black
      }
    }
  }
  return true;
}

int main()
{
  // ===PATH_TO_CONFIG_FILE_AND_SEGMENTATION_OUTPUT_IMAGES===
  //string filename = "/testdata/tor/out/tor.089/tor.089.015.left.avi.dat/tor.089.015.left.avi.frameData.xml";
  string filename_segm_out = "/testdata/tor/out/tor.089/tor.089.015.left.avi.dat/segmentation/tor.089.015.left.%06d.png";

  // ===PREPEARING_FOR_WRITING_VIDEO===
  const string Video_input_PATH = "/testdata/tor/inp/tor.089/tor.089.015.left.avi";
  const string Video_output_PATH = "/home/alpatikov_i/Pictures/OptflowSegm1.avi";
  VideoCapture cap(Video_input_PATH);
  VideoCapture out_seg;  // Creating VideoCapture for segmentation output images
  out_seg.open(filename_segm_out);
  int frame_number = 0;
  int frame_width = cap.get(CV_CAP_PROP_FRAME_WIDTH);
  int frame_height = cap.get(CV_CAP_PROP_FRAME_HEIGHT);
  int DUPLEX_width = 1920;
  int DUPLEX_height = 600;
  VideoWriter video(Video_output_PATH, CV_FOURCC('M','J','P','G'),
                    10, Size(DUPLEX_width,DUPLEX_height), true);


  Mat frame1, prvs;
  cap >> frame1;
  cvtColor(frame1, prvs, COLOR_BGR2GRAY);

  Mat out_segmmap(frame1.rows,frame1.cols,CV_8UC3,Scalar(0,0,0));
 Mat segm_image;
  out_seg >> segm_image;
  fill_out_segmmap(segm_image,out_segmmap);

  while (true)
  {
    // ===FRAME_DEFINITION===
    // работа с исходным изображением

    Mat frame, next;
    cap >> frame;
    cvtColor(frame, next, COLOR_BGR2GRAY);
    Mat flow(frame.size(), CV_32FC2);







  Ptr< cv::optflow::DISOpticalFlow > Disof = cv::optflow::createOptFlow_DIS(cv::optflow::DISOpticalFlow::PRESET_ULTRAFAST);
  Disof->calc(prvs, next, flow);


    // visualization from docs.opencv
    Mat flow_parts[2];
    split(flow, flow_parts);



     Mat draw = viz_flow(flow, frame, {}, 8);




    // ===CONVERT_IMAGE_TO_BINARY===
    Mat binMat (frame.size(), CV_8U); //Grayscale matrix
    binar_segm_image(binMat, segm_image); // Convert grayscale matrix to binary

    // ===ADD_CALIB_READ_AND_BIRDEYE_TRANSFORMER===
    const string calib_PATH = "/home/alpatikov_i/ar13/testdata/tor/inp/tor.089/calib/cam_mono.yml";
    Camera camera_cam;
    camera_cam.read(calib_PATH);
    BirdeyeTransformer birdEyeT(camera_cam);
    Mat binBirdEyeTImage = birdEyeT.process(binMat);

    // ===COMPUTE_CONNECTED-COMPONENT_LABELING===
    CCMap ccmap;
    Mat emptyWeights;
    ccmap.compute(binBirdEyeTImage, emptyWeights);


    Mat image_increment(frame.rows,frame.cols,CV_8UC3,Scalar(0,0,0));

    int v, u = 0;
    for(int i = 0 ; i < frame.rows; i++)
    {

      for(int j = 0 ; j < frame.cols ; j++)
      {

              u = static_cast<int> (round(flow_parts[1].at<float>(i,j)));
              v = static_cast<int> (round(flow_parts[0].at<float>(i,j)));


        if (((i + u) < frame.rows) && (i + u >= 0) && (j + v < frame.cols) && (j + v >= 0))
        {
          image_increment.at<Vec3b>(i + u, j + v) = out_segmmap.at<Vec3b>(i, j);
        }
      }
    }
    out_segmmap = image_increment;


    // ===DISPLAY_TWO_SCREENS===
    cv::Mat win_mat(cv::Size(1920, 600), CV_8UC3);
    draw.copyTo(win_mat(cv::Rect(  0, 0, 960, 600)));      // Copy small images into big mat
    out_segmmap.copyTo(win_mat(cv::Rect(960, 0, 960, 600)));
    cv::imshow("Images", win_mat);                          // Display big mat

    // ===WRITE_VIDEO_AND_PICTURE===
    video.write(win_mat);
    imwrite("/home/alpatikov_i/Pictures/out_segmmap7.jpg", win_mat);
    char c = (char)waitKey(0);
    if( c == 27 ) break;
  }
  destroyAllWindows();
  return 0;
}
