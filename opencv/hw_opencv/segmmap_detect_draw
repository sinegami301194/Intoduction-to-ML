#include <QCoreApplication>
#include <opencv2/core.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/highgui.hpp>
//#include <ocvgui.h>
//#include <ar10/ocvgui.h>
//#include <arcore/markup_reader.h>
//#include <framedata/framedata.h>

#include <string>
#include <iostream>
#include <vector>

using namespace cv;
using namespace std;

class FrameObjectsContain
{
public:
  FrameObjectsContain() : x(0), y(0), w(0), h(0), flags(0), index(0), zOrder(0),
    occlusionRate(0.0), track(0), tag()
  {}

  void read(const FileNode& node)                          //Read serialization for this class
  {
    type = (string)node["type"];
    flags = (int)node["flags"];
    int index = static_cast<int>(node["index"]);
    //index = (int)node["index"];
    zOrder = (int)node["zOrder"];
    occlusionRate = (double)node["occlusionRate"];
    track = (int)node["track"];
    tag = (string)node["tag"];
    if (node["rect"].isSeq() && node["rect"].size() == 4)
    {
      std::vector<int> zz;
      node["rect"] >> zz;
      x = zz[0];
      y = zz[1];
      w = zz[2];
      h = zz[3];
    }
  }
public:   // Data Members
  string type;
  int x;
  int y;
  int w;
  int h;
  int flags;
  int index;
  int zOrder;
  double occlusionRate;
  int track;
  string tag;
};

bool read_segmmap_png()
{

}

bool draw_text_rect(Mat& frame, const char * str, int x, int y, int w, int h)
{
  putText(frame, str, cvPoint(30,30),
          FONT_HERSHEY_COMPLEX_SMALL, 1.0, cvScalar(128,255,255), 1, CV_AA);
  rectangle(frame,Rect(x, y, w, h), Scalar(128,255,255),2);
  return true;
}

int main(int argc, char* argv[])
{
  const String &Video_PATH = "/testdata/tor/inp/tor.028/tor.028.021.left.avi";
  VideoCapture cap(Video_PATH);

  // ===PREPEARING_FOR_WRITING_VIDEO===
  int frame_number = 0;
  int frame_width = cap.get(CV_CAP_PROP_FRAME_WIDTH);
  int frame_height = cap.get(CV_CAP_PROP_FRAME_HEIGHT);
  VideoWriter video("/home/alpatikov_i/Pictures/DrawFrameData1.avi",CV_FOURCC('M','J','P','G'),
                    10, Size(frame_width,frame_height),true);

  string filename = "/testdata/tor/out/tor.028/tor.028.021.left.avi.dat/tor.028.021.left.avi.frameData.xml";
  string filename_segm_out = "/testdata/tor/out/tor.028/tor.028.021.left.avi.dat/segmentation/tor.028.021.left.000000.png";
  {
    //read
    FileStorage fs;
    fs.open(filename, FileStorage::READ);
    int itNr;
    itNr = (int) fs["iterationNr"];
    if (!fs.isOpened())
    {
      cerr << "Failed to open " << filename << endl;
      return 1;
    }
    FileNode FDA = fs["FrameDataArray"];                                                 // Read string sequence - Get node
    if (FDA.type() != FileNode::SEQ)
    {
      cerr << "strings is not a sequence! FAIL" << endl;
      return 1;
    }
    FileNodeIterator itFDA = FDA.begin(), it_end = FDA.end();                            // Go through the node FrameDataArray
    int i = 0;
    for (; itFDA != it_end; ++itFDA)
    {
      FileNode underscore_1 = *itFDA;
      FileNodeIterator itUS1 = underscore_1.begin(), itUS1_end = underscore_1.end();     // Go through the node underscore_1

      int FrameNumber = (int)(underscore_1["FrameNumber"]);
      FileNode FrameObjects = underscore_1["FrameObjects"];
      FileNodeIterator itFO = FrameObjects.begin();                                      // Go through the node FrameObjects
      FileNode US2 = *itFO;                                                              // Go through the node underscore_2
      FrameObjectsContain node;
      node.read(US2);


      // ===FRAME_DEFINITION===
      Mat frame;
      cap >> frame;

      Mat out_segmmap(frame.rows,frame.cols,CV_8UC3,Scalar(255,255,255));
      // ===READ_SEGMMAP_AND_DRAW_AT_PICTURES===
      Mat img = imread(filename_segm_out);
cout << "zzz31" << endl;
         for(int j=0;j<img.rows;j++)
         {cout << img.rows << endl;
          for (int i=0;i<img.cols;i++)
            {
              if (img.at<cv::Vec3b>(j,i)[0] == 0)
              {
                rectangle(out_segmmap,Rect(2*i, 2*j, 2, 2), Scalar(128,200,100));
              }
              if (img.at<cv::Vec3b>(j,i)[0] == 1)
              {
                rectangle(out_segmmap,Rect(2*i, 2*j, 2, 2), Scalar(128,150,255));
              }
              if (img.at<cv::Vec3b>(j,i)[0] == 2)
              {
                rectangle(out_segmmap,Rect(2*i, 2*j, 2, 2), Scalar(128,255,128));
              }
              if (img.at<cv::Vec3b>(j,i)[0] == 3)
              {
                rectangle(out_segmmap,Rect(2*i, 2*j, 2, 2), Scalar(128,28,12));
              }
              if (img.at<cv::Vec3b>(j,i)[0] == 4)
              {
                rectangle(out_segmmap,Rect(2*i, 2*j, 2, 2), Scalar(255, 0, 0));
              }
              if (img.at<cv::Vec3b>(j,i)[0] == 5)
              {
                rectangle(out_segmmap,Rect(2*i, 2*j, 2, 2), Scalar(255,128,0));
              }
              if (img.at<cv::Vec3b>(j,i)[0] == 6)
              {
                rectangle(out_segmmap,Rect(2*i, 2*j, 2, 2), Scalar(255,0,128));
              }
              if (img.at<cv::Vec3b>(j,i)[0] == 7)
              {
                rectangle(out_segmmap,Rect(2*i, 2*j, 2, 2), Scalar(255,0,255));
              }
            
            }
          }
 
imwrite("/home/alpatikov_i/Pictures/out_segmmap.jpg", out_segmmap);

            cout << "zzz2" << endl;
      // ===DRAW_RECTANGLES===SHOW_PICTURES==WRITE_VIDEO_OUTPUT===

      string frame_str = string("Frame number: ").append(to_string(FrameNumber));
      const char * str = frame_str.c_str();

      //drawTransparency(frame, overlay, 10, 10);
      //cv::Mat color(out_segmmap.size(), CV_8UC3, cv::Scalar(0, 125, 125));
      double alpha = 0.5;
      cv::addWeighted(frame, alpha, out_segmmap, 1.0 - alpha , 0.0, frame);

      draw_text_rect(frame, str, node.x, node.y, node.w, node.h);
      namedWindow("win",WINDOW_AUTOSIZE);
      cout << frame.size() << endl;
      imshow("win",frame);
      video.write(frame);
      imwrite("/home/alpatikov_i/Pictures/out_segmmap1.jpg", frame);
      char c = (char)waitKey(0);
      if( c == 27 ) break;

    }
  }


  destroyAllWindows();
  return 0;
}
